// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package database

import (
	"context"
	"time"
)

const createReport = `-- name: CreateReport :exec
INSERT INTO report(url, title, starting_at, duration_minutes, reporters, conference_id, status)
    VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateReportParams struct {
	Url             string
	Title           string
	StartingAt      time.Time
	DurationMinutes int64
	Reporters       string
	ConferenceID    int64
	Status          string
}

func (q *Queries) CreateReport(ctx context.Context, arg CreateReportParams) error {
	_, err := q.exec(ctx, q.createReportStmt, createReport,
		arg.Url,
		arg.Title,
		arg.StartingAt,
		arg.DurationMinutes,
		arg.Reporters,
		arg.ConferenceID,
		arg.Status,
	)
	return err
}

const getAllReports = `-- name: GetAllReports :many
SELECT
    id, url, title, starting_at, duration_minutes, reporters, conference_id, status
FROM
    report
`

func (q *Queries) GetAllReports(ctx context.Context) ([]Report, error) {
	rows, err := q.query(ctx, q.getAllReportsStmt, getAllReports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Report
	for rows.Next() {
		var i Report
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.Title,
			&i.StartingAt,
			&i.DurationMinutes,
			&i.Reporters,
			&i.ConferenceID,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
